class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        A,B = nums1, nums2
        total = len(A) + len(B)
        half = total // 2 
        # make sure to do binary search on smaller one 
        if len(A) > len(B):
            A,B = B,A # python allows this other wise swap function is needed
        
        l,r = 0, len(A)-1 
        while True:
            i = (l+r) // 2 #A
            j = half - i - 2 #B extra -2 to comensate for both arrays starting at 0
            Aleft = A[i] if i >= 0 else float("-infinity")
            Aright = A[i+1] if i+1 < len(A) else float("infinity")
            Bleft = B[j] if j >= 0 else float("-infinity")
            Bright = B[j+1] if j+1 < len(B) else float("infinity")
            
            if Aleft <= Bright and Bleft <= Aright:
                #if odd
                if total %2:
                    return min(Aright,Bright)
                #if even
                else:
                    return (max(Aleft,Bleft)+min(Aright,Bright)) / 2
            elif Aleft >Bright:
                r = i-1
            else:
                l = i+1
